const { Web3 } = require('web3');
// Connect to your local Ethereum node
const web3 = new Web3('http://127.0.0.1:7545');

// The bytecode of the contract (as a string)
const bytecode = 
'0x608060405234801561001057600080fd5b506040516107aa3803806107aa833981810160405281019061003291906102c5565b6040518060600160405280600060ff168152602001600560ff168152602001600560ff16815250600090600361006992919061019e565b5060008173ffffffffffffffffffffffffffffffffffffffff166040516024016040516020818303038152906040527f8129fc1c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610113919061036c565b600060405180830381855af49150503d806000811461014e576040519150601f19603f3d011682016040523d82523d6000602084013e610153565b606091505b5050905080610197576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018e90610406565b60405180910390fd5b5050610426565b82600380016004900481019282156102345791602002820160005b838211156101fe57835183826101000a81548167ffffffffffffffff021916908360ff16021790555092602001926008016020816007010492830192600103026101b9565b80156102325782816101000a81549067ffffffffffffffff02191690556008016020816007010492830192600103026101fe565b505b5090506102419190610245565b5090565b5b8082111561025e576000816000905550600101610246565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061029282610267565b9050919050565b6102a281610287565b81146102ad57600080fd5b50565b6000815190506102bf81610299565b92915050565b6000602082840312156102db576102da610262565b5b60006102e9848285016102b0565b91505092915050565b600081519050919050565b600081905092915050565b60005b8381101561032657808201518184015260208101905061030b565b83811115610335576000848401525b50505050565b6000610346826102f2565b61035081856102fd565b9350610360818560208601610308565b80840191505092915050565b6000610378828461033b565b915081905092915050565b600082825260208201905092915050565b7f496e697469616c697a6174696f6e2064656c656761746563616c6c206661696c60008201527f65642e0000000000000000000000000000000000000000000000000000000000602082015250565b60006103f0602383610383565b91506103fb82610394565b604082019050919050565b6000602082019050818103600083015261041f816103e3565b9050919050565b610375806104356000396000f3fe608060405234801561001057600080fd5b506004361061003a5760003560e01c80639f61f4ff146100c7578063bf124dc5146100e55761003b565b5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166000366040516100859291906101c2565b600060405180830381855af49150503d80600081146100c0576040519150601f19603f3d011682016040523d82523d6000602084013e6100c5565b606091505b005b6100cf610101565b6040516100dc919061021c565b60405180910390f35b6100ff60048036038101906100fa91906102a1565b610127565b005b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b80600083600281111561013d5761013c6102e1565b5b6003811061014e5761014d610310565b5b600491828204019190066008026101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505050565b600081905092915050565b82818337600083830152505050565b60006101a98385610183565b93506101b683858461018e565b82840190509392505050565b60006101cf82848661019d565b91508190509392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610206826101db565b9050919050565b610216816101fb565b82525050565b6000602082019050610231600083018461020d565b92915050565b600080fd5b6003811061024957600080fd5b50565b60008135905061025b8161023c565b92915050565b600067ffffffffffffffff82169050919050565b61027e81610261565b811461028957600080fd5b50565b60008135905061029b81610275565b92915050565b600080604083850312156102b8576102b7610237565b5b60006102c68582860161024c565b92505060206102d78582860161028c565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358fe1220fe92fe118f91a1659ed437fa8a9afe906c1c1607a6853eb96344115e6657fe3064736f6c63430008fe0033';

// The ABI (Application Binary Interface) of the contract
const abi = [
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "LOGIC",
                "type": "address"
            }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
    },
    {
        "stateMutability": "nonpayable",
        "type": "fallback"
    },
    {
        "inputs": [],
        "name": "LOGIC",
        "outputs": [
            {
                "internalType": "address",
                "name": "",
                "type": "address"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "enum Proxy.FeeType",
                "name": "feeType",
                "type": "uint8"
            },
            {
                "internalType": "uint64",
                "name": "percent",
                "type": "uint64"
            }
        ],
        "name": "updateFee",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    }
];

async function deployContract() {
    const accounts = await web3.eth.getAccounts();

    // Create a new contract instance with the contract ABI
    const myContract = new web3.eth.Contract(abi);

    // Deploy the contract with the constructor parameter
    const contractInstance = await myContract.deploy({
        data: bytecode,
        arguments: ['0xBaC607B72311ec4DdAE24E5ce08ba443c0602ed4'] // Replace with actual address
    })
    .send({
        from: accounts[0],
        gas: 1500000,
        gasPrice: '30000000000'
    });

    console.log('Contract deployed at address:', contractInstance.options.address);
    return contractInstance;
}

deployContract().then(contractInstance => {
    // Interaction with the contract can be added here
});

